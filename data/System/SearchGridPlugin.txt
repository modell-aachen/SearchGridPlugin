%META:TOPICPARENT{name="Plugins"}%

%JQREQUIRE{"chili"}%

---+ Search Grid Plugin

%SHORTDESCRIPTION%

This Plugin provides an easy to use macro for generating topic overviews with data provided by Solr.

%TOC%

---++ Installation
%$INSTALL_INSTRUCTIONS%


---++ Macro
%INCLUDE{"VarSEARCHGRID"}%

---++ Short definition
There is a short notation available, which will auto generate most of the needed information:

Example:
<verbatim>
%SEARCHGRID{
   "web:* form:*DummyForm"
   headers="My Cutom Title,,,Datum,"
   fields="(author),(WF05611789398461883),(WF08329482890188932,link[target:solrfield]),date-field(date)"
   fieldRestrictions=""
   form="System.DummyForm"
}%
</verbatim>
The general idea is, that the name of the form field is given and based on this information and the specified Form, all needed data will be generated. So the Form value is mandatory.
---+++ Links
When the field should be a link, this can be specified by writing 'link' as second argument. The default target is webtopic, when this should be overwritten a target can be specified in the []-Field directly behind the link text.
---+++ Special Fields
There are some special metadata fields, which are not defined in a Form, but stored by Solr:
| *Field name* | *Solr field* |
| author | author_s |
| title | title |
| lastEdited | workflowmeta_lasttime_currentstate_dt |
| createDate | createdate |
| workflowState | workflowstate_displayname_s |

---++ Solr Proxy
The plugin adds a 'REST proxy' which will forward the solr request to the solr plugin and processe the answer that are the main display values are added. For fields which have an displayvalue like Select+value fields. The result set gets an extra field with postfix =_dv=. So for a =field_Status_s= there is also a =field_Status_s_dv= which is the mapped value of the field_Status_s field.

The REST calls can be send to:
=/bin/rest/SearchGridPlugin/searchproxy=

---+++ Display values
Thera a two main ways to get some display values. One for the fields and one for the facets.
---++++ Field display values
A Field display value can be obtained by adding _dv to a solr field. The Searchgrid tries to get some more readable values. This is only possible when the search result contains a form field. It will try to perform a RENDERFORDISPLAY on the wanted value, when it is successful, a field with the [field]_dv will be added to the result set and can be use. To perform an that the field must be returned by Solr, so when the =fieldRestriction= parameter is used, the field value without the _dv must be given.
<verbatim>
Get Responsible as display value use:
   fields="text-field(field_Responsible_s_dv)"
   fieldRestriction="field_Responsible_s"
</verbatim>
---++++ Facet display values
To get more readable values for the facets, the =form= parameter must be given. Solr does not provides no more informations for the facet fields, so the user has to specify how to render the display value. Here is no _dv value needed.
---++ Extension development
Other apps can define and register custom field and addon components to be used in the search grid.
---+++ Custom fields
A barebone component for a grid field and its registration would look like this:

<verbatim class="js">
var CustomField = Vue.extend({
	props: ['doc','params'],
	template: "<td>I am the custom component. Bow before me.</td>",
	created: function(){
		console.log(this.params[0]);
		console.log(this.params[1]);
	}
});

SearchGridPlugin.registerField("CustomField", CustomField);
</verbatim>

Then in the macro call it can be set as a field like this:
<verbatim>
...
fields="custom-field(Hello,World)"
...
</verbatim>
In this case the component would just show "I am the custom component. Bow before me." in the table and write to the console "Hello" and "World" when it has beend added to the DOM.

The component also has access to its corresponding document data in the grid via the doc prop.

---+++ Addons
A barebone component for an addon and its registration would look like this:
<verbatim class="js">
var CustomAddon = Vue.extend({
	props: ['api'],
	template: "<div>I am an addon. Nothing more.</div>",
	created: function(){
		console.log(this.api.hasGridView);
	}
});

SearchGridPlugin.registerComponent("CustomAddon", CustomAddon);
</verbatim>

Then in the macro call it is added like this:
<verbatim>
...
addons="custom-addon"
...
</verbatim>

Currently the use of addons is very limited. All used addons are rendered in the filters pane.
The api object provides the following attributes:
   * isGridView: False if the SearchGrid is in standard table display mode. True if it is in grid display mode
   * hideColumns(columns): Hides columns in the grid specified by their index (starting with 0). E.g. hideColumns([0,2]) would hide the first and the third column.
   * showColumns(columns): Shows columns in the grid specified by their index (starting with 0). E.g. showColumns([0,2]) would show the first and the third column.
---++ Plugin Info

|  Author: | Foswiki:Main.PluginAuthor |
|  Copyright: | &copy; 2016, Modell Aachen GmbH |
|  License: | GPL ([[http://www.gnu.org/copyleft/gpl.html][GNU General Public License]]) |
|  Release: | %$RELEASE% |
|  Version: | %$VERSION% |
|  Home: | http://modell-aachen.de |
|  Support: | http://modell-aachen.de |

